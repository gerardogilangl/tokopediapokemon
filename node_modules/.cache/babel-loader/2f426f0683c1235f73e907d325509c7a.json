{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\tokopedia-assignment\\\\src\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactPaginate from 'react-paginate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\nconst Home = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [PaginatedItems(4), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"ml-5\",\n      children: \"Pokemon List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 11\n  }, this);\n};\n\n_c = Home;\nexport default Home;\n\nfunction Items(_ref) {\n  let {\n    currentItems\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item #\", item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n}\n\n_c2 = Items;\n\nfunction PaginatedItems(_ref2) {\n  _s();\n\n  let {\n    itemsPerPage\n  } = _ref2;\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n\n  const [itemOffset, setItemOffset] = useState(0);\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PaginatedItems, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\n_c3 = PaginatedItems;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Home\");\n$RefreshReg$(_c2, \"Items\");\n$RefreshReg$(_c3, \"PaginatedItems\");","map":{"version":3,"sources":["C:/xampp/htdocs/tokopedia-assignment/src/Home.js"],"names":["React","useState","useEffect","ReactDOM","ReactPaginate","items","Home","PaginatedItems","Items","currentItems","map","item","itemsPerPage","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","console","log","slice","Math","ceil","length","handlePageClick","event","newOffset","selected"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;;;AAEA,MAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,EAA5B,EAAgC,EAAhC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,CAAd;;AACA,MAAMC,IAAI,GAAG,MAAM;AAEb,sBACI;AAAA,eACGC,cAAc,CAAC,CAAD,CADjB,eAEE;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAML,CARD;;KAAMD,I;AAUN,eAAeA,IAAf;;AAEA,SAASE,KAAT,OAAiC;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AAC/B,sBACE;AAAA,cACGA,YAAY,IACXA,YAAY,CAACC,GAAb,CAAkBC,IAAD,iBACf;AAAA,6BACE;AAAA,6BAAWA,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAFJ,mBADF;AAUD;;MAXQH,K;;AAaT,SAASD,cAAT,QAA0C;AAAA;;AAAA,MAAlB;AAAEK,IAAAA;AAAF,GAAkB;AACxC;AACA,QAAM,CAACH,YAAD,EAAeI,eAAf,IAAkCZ,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,CAAD,CAA1C,CAHwC,CAIxC;AACA;;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,CAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMgB,SAAS,GAAGF,UAAU,GAAGJ,YAA/B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBJ,UAAW,OAAME,SAAU,EAA7D;AACAL,IAAAA,eAAe,CAACR,KAAK,CAACgB,KAAN,CAAYL,UAAZ,EAAwBE,SAAxB,CAAD,CAAf;AACAH,IAAAA,YAAY,CAACO,IAAI,CAACC,IAAL,CAAUlB,KAAK,CAACmB,MAAN,GAAeZ,YAAzB,CAAD,CAAZ;AACD,GANQ,EAMN,CAACI,UAAD,EAAaJ,YAAb,CANM,CAAT,CARwC,CAgBxC;;AACA,QAAMa,eAAe,GAAIC,KAAD,IAAW;AACjC,UAAMC,SAAS,GAAID,KAAK,CAACE,QAAN,GAAiBhB,YAAlB,GAAkCP,KAAK,CAACmB,MAA1D;AACAL,IAAAA,OAAO,CAACC,GAAR,CACG,8BAA6BM,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAD7E;AAGAV,IAAAA,aAAa,CAACU,SAAD,CAAb;AACD,GAND;;AAQA,sBACE;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,YAAY,EAAElB;AAArB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AACE,MAAA,UAAU,EAAC,KADb;AAEE,MAAA,SAAS,EAAC,QAFZ;AAGE,MAAA,YAAY,EAAEgB,eAHhB;AAIE,MAAA,kBAAkB,EAAE,CAJtB;AAKE,MAAA,SAAS,EAAEX,SALb;AAME,MAAA,aAAa,EAAC,YANhB;AAOE,MAAA,qBAAqB,EAAE;AAPzB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAcD;;GAvCQP,c;;MAAAA,c","sourcesContent":["import React, { useState, useEffect }  from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactPaginate from 'react-paginate';\n\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nconst Home = () => {\n\n      return (\n          <div>\n            {PaginatedItems(4)}\n            <h1 className=\"ml-5\">Pokemon List</h1>\n          </div>\n      );\n}\n\nexport default Home;\n\nfunction Items({ currentItems }) {\n  return (\n    <>\n      {currentItems &&\n        currentItems.map((item) => (\n          <div>\n            <h3>Item #{item}</h3>\n          </div>\n        ))}\n    </>\n  );\n}\n\nfunction PaginatedItems({ itemsPerPage }) {\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected * itemsPerPage) % items.length;\n    console.log(\n      `User requested page number ${event.selected}, which is offset ${newOffset}`\n    );\n    setItemOffset(newOffset);\n  };\n\n  return (\n    <>\n      <Items currentItems={currentItems} />\n      <ReactPaginate\n        breakLabel=\"...\"\n        nextLabel=\"next >\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={5}\n        pageCount={pageCount}\n        previousLabel=\"< previous\"\n        renderOnZeroPageCount={null}\n      />\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}